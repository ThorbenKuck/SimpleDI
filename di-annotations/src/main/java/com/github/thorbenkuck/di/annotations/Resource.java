package com.github.thorbenkuck.di.annotations;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * This annotation is used, to inject resources.
 * <p>
 * The behaviour is similar to {@literal @Inject}, but only limited to fields.
 * <p>
 * Example:
 *
 * <pre><code>
 * public class Foo {
 *     {@literal @}Resource
 *     private String testResource;
 * 	   // ...
 * }
 * </code></pre>
 * <p>
 * The following specifications are required for this annotation (i.e. ApiSpecifications):
 * <ul>
 * <li>If not specified by using {@link Resource#key()}, the Resource annotation processor will use the variable name,
 * to find the resource.</li>
 * <li>If not specified by using {@link Resource#origin()}, the Resource annotation processor will search the classpath.</li>
 * <li>If not specified by using {@link Resource#defaultValue()}, the Resource annotation processor will inject null (or the
 * corresponding primitive, if the field is primitive).</li>
 * <li>If not specified by also annotation the field with {@link com.sun.istack.internal.Nullable}, the injection of this
 * resource will exit with an Exception, because null is prohibited by default.</li>
 * </ul>
 * <p>
 * The use of annotation processors should be favored. Most of the time, resources may not be found at compile time (duh),
 * therefor we should create a ResourceProvider, which looks up the resource at runtime.
 */
@Retention(RetentionPolicy.CLASS)
@Target(ElementType.FIELD)
public @interface Resource {

	/**
	 * The origin, where the resource should be searched.
	 *
	 * @return the origin of the resource
	 */
	Origin origin() default Origin.SYSTEM_PROPERTIES;

	/**
	 * The key of the resource that should be injected.
	 * <p>
	 * If not set (i.e. empty), the name of the annotated
	 * field should be used.
	 * </p>
	 *
	 * @return the key of this resource
	 */
	String key() default "";

	/**
	 * The name that should be assigned to the ResourceProvider, that will be generated by annotation processors.
	 * <p>
	 * This field may also be used on dynamic meta programming, but is way more useful for static meta programming.
	 *
	 * @return the name of the ResourceProvider implementation, that should be used.
	 */
	String providerKey() default "";

	/**
	 * The value, that should be used, if it cannot be found
	 * within the origin.
	 *
	 * @return the default value
	 */
	String defaultValue() default "";
}
