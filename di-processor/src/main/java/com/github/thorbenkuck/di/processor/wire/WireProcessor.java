package com.github.thorbenkuck.di.processor.wire;

import com.github.thorbenkuck.di.IdentifiableProvider;
import com.github.thorbenkuck.di.annotations.Wire;
import com.github.thorbenkuck.di.processor.DiProcessor;
import com.google.auto.service.AutoService;
import com.squareup.javapoet.*;

import javax.annotation.Generated;
import javax.annotation.processing.Processor;
import javax.lang.model.element.Element;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.PackageElement;
import javax.lang.model.element.TypeElement;
import java.io.IOException;
import java.lang.annotation.Annotation;
import java.time.LocalDateTime;
import java.util.Collection;
import java.util.Collections;

@AutoService(Processor.class)
public class WireProcessor extends DiProcessor {

	@Override
	protected Collection<Class<? extends Annotation>> supportedAnnotations() {
		return Collections.singletonList(Wire.class);
	}

	@Override
	protected void handle(Element element) {
		if (!(element instanceof TypeElement)) {
			error("The annotated element of Wire has to be a type!", element);
			return;
		}

		TypeElement typeElement = (TypeElement) element;
		ConstructorFinder constructorFinder = new ConstructorFinder(typeElement);
		GetAndLazyMethodConstructor getAndLazyMethodConstructor = new GetAndLazyMethodConstructor(typeElement);
		TypeIdentifierConstructor typeIdentifierConstructor = new TypeIdentifierConstructor(typeElement, types);

		TypeSpec.Builder builder = TypeSpec.classBuilder(typeElement.getSimpleName() + "IdentifiableProvider")
				.addModifiers(Modifier.PUBLIC, Modifier.FINAL)
				.addSuperinterface(ParameterizedTypeName.get(ClassName.get(IdentifiableProvider.class), TypeName.get(typeElement.asType())));

		builder.addAnnotation(AnnotationSpec.builder(AutoService.class)
				.addMember("value", "$T.class", IdentifiableProvider.class)
				.build());

		builder.addAnnotation(AnnotationSpec.builder(Generated.class)
				.addMember("value", "$S", WireProcessor.class.getName())
				.addMember("date", "$S", LocalDateTime.now().toString())
				.addMember("comments", "$S", "This class is used to identify wired components")
				.build());

		getAndLazyMethodConstructor.analyze(builder);
		constructorFinder.analyze(builder);
		typeIdentifierConstructor.analyze(builder);

		PackageElement packageElement = (PackageElement) typeElement.getEnclosingElement();

		try {
			JavaFile.builder(packageElement.getQualifiedName().toString(), builder.build())
					.indent("	")
					.addFileComment("This file has been autogenerated")
					.build()
					.writeTo(filer);
		} catch (IOException e) {
			error(e.getMessage(), typeElement);
		}
	}
}
